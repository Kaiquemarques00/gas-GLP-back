generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FUNC
  CLIENTE
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  password  String
  role      UserRole @default(CLIENTE)
  companyId String?

  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  queries Query[]

  @@map("users")
}

model Contract {
  id        String   @id @default(uuid())
  companyId String
  pdfPath   String
  isSigned  Boolean  @default(false)
  signedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Company {
  id           String  @id @default(uuid())
  razaoSocial  String
  nomeFantasia String
  cnpj         String  @unique
  segmento     String
  cep          String
  estado       String
  cidade       String
  bairro       String
  endereco     String
  numero       String
  complemento  String?

  responsavel String
  telefone    String
  email       String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  contracts Contract[] // ðŸ‘ˆ Relacionamento 1:N com contratos

  @@map("companies")
}

model Simulation {
  id            String   @id @default(uuid())
  state         String
  city          String
  distributor   String
  consumptionKg Float
  averageCost   Float
  pricePerKg    Float
  companyName   String
  visitorName   String
  phone         String
  email         String
  segment       String
  createdAt     DateTime @default(now())

  @@map("simulations")
}

model Query {
  id            String @id @default(uuid())
  consumptionKg Float
  averageCost   Float
  pricePerKg    Float
  userId        String

  user User? @relation(fields: [userId], references: [id])
  saving        Saving?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("queries")
}

model Saving {
  id               String   @id @default(uuid())
  queryId           String   @unique
  fairValue        Float
  estimatedSaving  Float
  savingPercentage Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  query Query @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@map("savings")
}

model Cotacao {
  id          String   @id @default(uuid())
  valuePerKg  Float

  createdAt   DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("cotacoes")
}